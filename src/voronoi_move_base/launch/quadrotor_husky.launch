<?xml version="1.0"?>

<launch>
   <arg name="name" default="quadrotor"/>
   <arg name="tf_prefix" default="$(optenv ROS_NAMESPACE)"/>
   <arg name="x" default="1.0"/>
   <arg name="y" default="0.0"/>
   <arg name="z" default="0.5"/>

   <arg name="use_ground_truth_for_tf" default="true"/>
   <arg name="use_ground_truth_for_control" default="true"/>
   <arg name="use_pose_estimation" if="$(arg use_ground_truth_for_control)" default="false"/>
   <arg name="use_pose_estimation" unless="$(arg use_ground_truth_for_control)" default="true"/>

  <!-- <arg name="world_name" default="worlds/empty.world"/> -->

  <arg name="laser_enabled" default="true"/>
  <arg name="ur5_enabled" default="false"/>
  <arg name="kinect_enabled" default="false"/>

<!-- Args over -->
   <!-- load an empty world -->
   <!--include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" value="$(arg world_name)"/>
    <arg name="paused" value="false"/>
    <arg name="use_sim_time" value="true"/>
    <arg name="gui" value="true"/>
    <arg name="headless" value="false"/>
    <arg name="debug" value="false"/>
   </include-->
<!-- Spawn baby Husky ^_^ -->
  <arg name="world_name" default="$(find husky_gazebo)/worlds/clearpath_playpen.world"/>
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" value="$(arg world_name)"/> <!-- world_name is wrt GAZEBO_RESOURCE_PATH environment variable -->
    <arg name="paused" value="false"/>
    <arg name="use_sim_time" value="true"/>
    <arg name="gui" value="true"/>
    <arg name="headless" value="false"/>
    <arg name="debug" value="false"/>
  </include>

  <!-- Husky -->
  <!-- <param name="robot_description" command="$(find xacro)/xacro.py '$(env HUSKY_GAZEBO_DESCRIPTION)'
    laser_enabled:=$(arg laser_enabled)
    ur5_enabled:=$(arg ur5_enabled)
    kinect_enabled:=$(arg kinect_enabled)
    " /> -->

    <!-- Engineer -->
    <param name="robot_description"
  	 command="$(find xacro)/xacro.py '$(find eng_description)/urdf/eng.xacro'

     " />
<!--
     laser_enabled:=$(arg laser_enabled)
     ur5_enabled:=$(arg ur5_enabled)
     kinect_enabled:=$(arg kinect_enabled) -->

  <!--  Husky  -->
  <!-- <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" /> -->
  <!-- <include file="$(find husky_control)/launch/control.launch"/> -->



  <!-- Include ros_control configuration for ur5, only used in simulation -->
  <group if="$(arg ur5_enabled)">

    <!-- Load UR5 controllers -->
    <rosparam command="load" file="$(find husky_control)/config/control_ur5.yaml" />
    <node name="arm_controller_spawner" pkg="controller_manager" type="spawner" args="arm_controller --shutdown-timeout 3"/>

    <!-- Fake Calibration -->
    <node pkg="rostopic" type="rostopic" name="fake_joint_calibration" args="pub calibrated std_msgs/Bool true" />

    <!-- Stow the arm -->
    <node pkg="husky_control" type="stow_ur5" name="stow_ur5"/>

  </group>

  <group if="$(arg kinect_enabled)">

    <!-- Include poincloud_to_laserscan if simulated Kinect is attached -->
    <node pkg="pointcloud_to_laserscan" type="pointcloud_to_laserscan_node" name="pointcloud_to_laserscan" output="screen">

        <remap from="cloud_in" to="camera/depth/points"/>
        <remap from="scan" to="camera/scan"/>
        <rosparam>
            target_frame: base_link # Leave empty to output scan in the pointcloud frame
            tolerance: 1.0
            min_height: 0.05
            max_height: 1.0

            angle_min: -0.52 # -30.0*M_PI/180.0
            angle_max: 0.52 # 30.0*M_PI/180.0
            angle_increment: 0.005 # M_PI/360.0
            scan_time: 0.3333
            range_min: 0.45
            range_max: 4.0
            use_inf: true

            # Concurrency level, affects number of pointclouds queued for processing and number of threads used
            # 0 : Detect number of cores
            # 1 : Single threaded
            # 2->inf : Parallelism level
            concurrency_level: 1
        </rosparam>
    </node>

  </group>

  <!-- Spawn robot in gazebo -->
  <!-- <node name="spawn_husky_model" pkg="gazebo_ros" type="spawn_model"
    args="$(optenv ROBOT_INITIAL_POSE) -unpause -urdf -param robot_description -model mobile_base"/> -->
    <node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"
  	args="-urdf -model eng -param robot_description -x $(arg x) -y $(arg y) -z $(arg z)"/>


<!-- Husky spawned -->
<!-- <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" value="$(find eng_gazebo)/worlds/eng.world"/>
  </include> -->


<!-- Run gmapper  -->
	<include file="$(find husky_navigation)/launch/gmapping.launch" />

	<!--- Run Move Base -->
	<include file="$(find husky_navigation)/launch/move_base.launch" />
<!-- spawn Quadcopter 1 -->
<group ns="uav1">
   <include file="$(find voronoi_move_base)/launch/spawn_quadrotor.launch">
     <arg name="name" default="quadrotor1"/>
     <arg name="model" value="$(find voronoi_move_base)/urdf/quadrotor_with_kinect.gazebo.xacro"/>
     <arg name="tf_prefix" default="uav1"/>
     <arg name="ns" default="/uav1/uav1/"/>
     <arg name="x" default="0"/>
     <arg name="y" default="-1"/>
     <arg name="z" default="0.3"/>
     <arg name="use_ground_truth_for_tf" value="$(arg use_ground_truth_for_tf)"/>
     <arg name="use_ground_truth_for_control" value="$(arg use_ground_truth_for_control)"/>
     <arg name="use_pose_estimation" value="$(arg use_pose_estimation)"/>
   </include>
</group>

<group ns="uav2">
   <include file="$(find voronoi_move_base)/launch/spawn_quadrotor.launch">
     <arg name="name" default="quadrotor2"/>
     <arg name="model" value="$(find voronoi_move_base)/urdf/quadrotor_with_kinect.gazebo.xacro"/>
     <arg name="tf_prefix" default="uav2"/>
     <arg name="ns" default="/uav2/uav2/"/>
     <arg name="x" default="0"/>
     <arg name="y" default="1"/>
     <arg name="z" default="0.3"/>
     <arg name="use_ground_truth_for_tf" value="$(arg use_ground_truth_for_tf)"/>
     <arg name="use_ground_truth_for_control" value="$(arg use_ground_truth_for_control)"/>
     <arg name="use_pose_estimation" value="$(arg use_pose_estimation)"/>
   </include>
</group>

   <!-- spawn Husky -->
<!--group ns="ugv1"-->
   <!--include file="$(find husky_gazebo)/launch/spawn_husky.launch">
    <arg name="laser_enabled" value="$(arg laser_enabled)"/>
    <arg name="ur5_enabled" value="$(arg ur5_enabled)"/>
    <arg name="kinect_enabled" value="$(arg kinect_enabled)"/>
  </include-->
<!--/group-->
	<node pkg="topic_tools" type="relay" name="relay_pc1" args="/uav1/camera/depth/points /cameras_joint_depth_points"></node>
	<node pkg="topic_tools" type="relay" name="relay_pc2" args="/uav2/camera/depth/points /cameras_joint_depth_points"></node>
	<node pkg="topic_tools" type="relay" name="relay_map" args="/projected_map /map"></node>

	<!-- publish transform from world to odom -->
	<node pkg="tf" type="static_transform_publisher" name="odom_world_broadcaster" args="0 0 0 0 0 0 world map 100" />

	<!-- Launch octomap -->
	<node pkg="octomap_server" type="octomap_server_node" name="octomap_server">
		<param name="resolution" value="0.1" />

		<!-- fixed map frame (set to 'map' if SLAM or localization running!) -->
		<!--param name="frame_id" type="string" value="odom_combined" /-->
		<param name="frame_id" type="string" value="world" />
		<param name="base_frame_id" type="string" value="world" />

		<!-- maximum range to integrate (speedup!) -->
		<param name="sensor_model/max_range" value="5.0" />

		<!-- let it cut ground from the map -->
		<param name="filter_ground" value="true" />
		<!--param name="pointcloud_min" value="1" />
		<param name="pointcloud_max" value="10" /-->

		<!-- data source to integrate (PointCloud2) -->
		<remap from="cloud_in" to="/cameras_joint_depth_points" />
		<!--<remap from="map" to="projected_map" />-->
	</node>
  <!-- <include file="$(find eng_control)/launch/eng_control.launch"/> -->
  <!-- <node name="move" pkg="eng_control" type="move_base.py" output="screen"></node> -->

</launch>
