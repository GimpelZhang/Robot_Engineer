// Generated by gencpp from file motion_editor_core/ExecuteMotionResult.msg
// DO NOT EDIT!


#ifndef MOTION_EDITOR_CORE_MESSAGE_EXECUTEMOTIONRESULT_H
#define MOTION_EDITOR_CORE_MESSAGE_EXECUTEMOTIONRESULT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace motion_editor_core
{
template <class ContainerAllocator>
struct ExecuteMotionResult_
{
  typedef ExecuteMotionResult_<ContainerAllocator> Type;

  ExecuteMotionResult_()
    : error_code()
    , error_string()
    , error_group()  {
    }
  ExecuteMotionResult_(const ContainerAllocator& _alloc)
    : error_code(_alloc)
    , error_string(_alloc)
    , error_group(_alloc)  {
    }



   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _error_code_type;
  _error_code_type error_code;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _error_string_type;
  _error_string_type error_string;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _error_group_type;
  _error_group_type error_group;


    enum { SUCCESSFUL = 0 };
     enum { INVALID_GOAL = -1 };
     enum { INVALID_JOINTS = -2 };
     enum { OLD_HEADER_TIMESTAMP = -3 };
     enum { PATH_TOLERANCE_VIOLATED = -4 };
     enum { GOAL_TOLERANCE_VIOLATED = -5 };
     enum { MOTION_UNKNOWN = -6 };
 

  typedef boost::shared_ptr< ::motion_editor_core::ExecuteMotionResult_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::motion_editor_core::ExecuteMotionResult_<ContainerAllocator> const> ConstPtr;

}; // struct ExecuteMotionResult_

typedef ::motion_editor_core::ExecuteMotionResult_<std::allocator<void> > ExecuteMotionResult;

typedef boost::shared_ptr< ::motion_editor_core::ExecuteMotionResult > ExecuteMotionResultPtr;
typedef boost::shared_ptr< ::motion_editor_core::ExecuteMotionResult const> ExecuteMotionResultConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::motion_editor_core::ExecuteMotionResult_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::motion_editor_core::ExecuteMotionResult_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace motion_editor_core

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'actionlib_msgs': ['/opt/ros/indigo/share/actionlib_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'motion_editor_core': ['/home/somal/catkin_ws/src/motion_editor/motion_editor_core/msg', '/home/somal/catkin_ws/devel/share/motion_editor_core/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::motion_editor_core::ExecuteMotionResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::motion_editor_core::ExecuteMotionResult_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::motion_editor_core::ExecuteMotionResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::motion_editor_core::ExecuteMotionResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::motion_editor_core::ExecuteMotionResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::motion_editor_core::ExecuteMotionResult_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::motion_editor_core::ExecuteMotionResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ec7a1098aa2ee6f24b1e7d082bb5642f";
  }

  static const char* value(const ::motion_editor_core::ExecuteMotionResult_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xec7a1098aa2ee6f2ULL;
  static const uint64_t static_value2 = 0x4b1e7d082bb5642fULL;
};

template<class ContainerAllocator>
struct DataType< ::motion_editor_core::ExecuteMotionResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "motion_editor_core/ExecuteMotionResult";
  }

  static const char* value(const ::motion_editor_core::ExecuteMotionResult_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::motion_editor_core::ExecuteMotionResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
# Result\n\
int32[] error_code\n\
int32 SUCCESSFUL = 0\n\
int32 INVALID_GOAL = -1\n\
int32 INVALID_JOINTS = -2\n\
int32 OLD_HEADER_TIMESTAMP = -3\n\
int32 PATH_TOLERANCE_VIOLATED = -4\n\
int32 GOAL_TOLERANCE_VIOLATED = -5\n\
int32 MOTION_UNKNOWN = -6\n\
\n\
string error_string\n\
string[] error_group\n\
";
  }

  static const char* value(const ::motion_editor_core::ExecuteMotionResult_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::motion_editor_core::ExecuteMotionResult_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.error_code);
      stream.next(m.error_string);
      stream.next(m.error_group);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct ExecuteMotionResult_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::motion_editor_core::ExecuteMotionResult_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::motion_editor_core::ExecuteMotionResult_<ContainerAllocator>& v)
  {
    s << indent << "error_code[]" << std::endl;
    for (size_t i = 0; i < v.error_code.size(); ++i)
    {
      s << indent << "  error_code[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.error_code[i]);
    }
    s << indent << "error_string: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.error_string);
    s << indent << "error_group[]" << std::endl;
    for (size_t i = 0; i < v.error_group.size(); ++i)
    {
      s << indent << "  error_group[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.error_group[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MOTION_EDITOR_CORE_MESSAGE_EXECUTEMOTIONRESULT_H
