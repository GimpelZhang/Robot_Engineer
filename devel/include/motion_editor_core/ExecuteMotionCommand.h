// Generated by gencpp from file motion_editor_core/ExecuteMotionCommand.msg
// DO NOT EDIT!


#ifndef MOTION_EDITOR_CORE_MESSAGE_EXECUTEMOTIONCOMMAND_H
#define MOTION_EDITOR_CORE_MESSAGE_EXECUTEMOTIONCOMMAND_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace motion_editor_core
{
template <class ContainerAllocator>
struct ExecuteMotionCommand_
{
  typedef ExecuteMotionCommand_<ContainerAllocator> Type;

  ExecuteMotionCommand_()
    : motion_name()
    , time_factor(0.0)  {
    }
  ExecuteMotionCommand_(const ContainerAllocator& _alloc)
    : motion_name(_alloc)
    , time_factor(0.0)  {
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _motion_name_type;
  _motion_name_type motion_name;

   typedef float _time_factor_type;
  _time_factor_type time_factor;




  typedef boost::shared_ptr< ::motion_editor_core::ExecuteMotionCommand_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::motion_editor_core::ExecuteMotionCommand_<ContainerAllocator> const> ConstPtr;

}; // struct ExecuteMotionCommand_

typedef ::motion_editor_core::ExecuteMotionCommand_<std::allocator<void> > ExecuteMotionCommand;

typedef boost::shared_ptr< ::motion_editor_core::ExecuteMotionCommand > ExecuteMotionCommandPtr;
typedef boost::shared_ptr< ::motion_editor_core::ExecuteMotionCommand const> ExecuteMotionCommandConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::motion_editor_core::ExecuteMotionCommand_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::motion_editor_core::ExecuteMotionCommand_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace motion_editor_core

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'actionlib_msgs': ['/opt/ros/indigo/share/actionlib_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'motion_editor_core': ['/home/somal/catkin_ws/src/motion_editor/motion_editor_core/msg', '/home/somal/catkin_ws/devel/share/motion_editor_core/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::motion_editor_core::ExecuteMotionCommand_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::motion_editor_core::ExecuteMotionCommand_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::motion_editor_core::ExecuteMotionCommand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::motion_editor_core::ExecuteMotionCommand_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::motion_editor_core::ExecuteMotionCommand_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::motion_editor_core::ExecuteMotionCommand_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::motion_editor_core::ExecuteMotionCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "baea61f0df386139ca78eeafc991b967";
  }

  static const char* value(const ::motion_editor_core::ExecuteMotionCommand_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbaea61f0df386139ULL;
  static const uint64_t static_value2 = 0xca78eeafc991b967ULL;
};

template<class ContainerAllocator>
struct DataType< ::motion_editor_core::ExecuteMotionCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "motion_editor_core/ExecuteMotionCommand";
  }

  static const char* value(const ::motion_editor_core::ExecuteMotionCommand_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::motion_editor_core::ExecuteMotionCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Execute motion via topic	\n\
string  motion_name	\n\
float32 time_factor\n\
";
  }

  static const char* value(const ::motion_editor_core::ExecuteMotionCommand_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::motion_editor_core::ExecuteMotionCommand_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.motion_name);
      stream.next(m.time_factor);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct ExecuteMotionCommand_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::motion_editor_core::ExecuteMotionCommand_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::motion_editor_core::ExecuteMotionCommand_<ContainerAllocator>& v)
  {
    s << indent << "motion_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.motion_name);
    s << indent << "time_factor: ";
    Printer<float>::stream(s, indent + "  ", v.time_factor);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MOTION_EDITOR_CORE_MESSAGE_EXECUTEMOTIONCOMMAND_H
