// Generated by gencpp from file hector_stair_detection_msgs/BorderAndOrientationOfStairs.msg
// DO NOT EDIT!


#ifndef HECTOR_STAIR_DETECTION_MSGS_MESSAGE_BORDERANDORIENTATIONOFSTAIRS_H
#define HECTOR_STAIR_DETECTION_MSGS_MESSAGE_BORDERANDORIENTATIONOFSTAIRS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <visualization_msgs/MarkerArray.h>
#include <geometry_msgs/PoseStamped.h>

namespace hector_stair_detection_msgs
{
template <class ContainerAllocator>
struct BorderAndOrientationOfStairs_
{
  typedef BorderAndOrientationOfStairs_<ContainerAllocator> Type;

  BorderAndOrientationOfStairs_()
    : header()
    , border_of_stairs()
    , orientation_of_stairs()
    , number_of_points(0)
    , directionX(0.0)
    , directionY(0.0)
    , directionZ(0.0)  {
    }
  BorderAndOrientationOfStairs_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , border_of_stairs(_alloc)
    , orientation_of_stairs(_alloc)
    , number_of_points(0)
    , directionX(0.0)
    , directionY(0.0)
    , directionZ(0.0)  {
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::visualization_msgs::MarkerArray_<ContainerAllocator>  _border_of_stairs_type;
  _border_of_stairs_type border_of_stairs;

   typedef  ::geometry_msgs::PoseStamped_<ContainerAllocator>  _orientation_of_stairs_type;
  _orientation_of_stairs_type orientation_of_stairs;

   typedef int32_t _number_of_points_type;
  _number_of_points_type number_of_points;

   typedef float _directionX_type;
  _directionX_type directionX;

   typedef float _directionY_type;
  _directionY_type directionY;

   typedef float _directionZ_type;
  _directionZ_type directionZ;




  typedef boost::shared_ptr< ::hector_stair_detection_msgs::BorderAndOrientationOfStairs_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hector_stair_detection_msgs::BorderAndOrientationOfStairs_<ContainerAllocator> const> ConstPtr;

}; // struct BorderAndOrientationOfStairs_

typedef ::hector_stair_detection_msgs::BorderAndOrientationOfStairs_<std::allocator<void> > BorderAndOrientationOfStairs;

typedef boost::shared_ptr< ::hector_stair_detection_msgs::BorderAndOrientationOfStairs > BorderAndOrientationOfStairsPtr;
typedef boost::shared_ptr< ::hector_stair_detection_msgs::BorderAndOrientationOfStairs const> BorderAndOrientationOfStairsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hector_stair_detection_msgs::BorderAndOrientationOfStairs_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hector_stair_detection_msgs::BorderAndOrientationOfStairs_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace hector_stair_detection_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'sensor_msgs': ['/opt/ros/indigo/share/sensor_msgs/cmake/../msg'], 'hector_stair_detection_msgs': ['/home/somal/catkin_ws/src/hector_visualization/hector_stair_detection_msgs/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'visualization_msgs': ['/opt/ros/indigo/share/visualization_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::hector_stair_detection_msgs::BorderAndOrientationOfStairs_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hector_stair_detection_msgs::BorderAndOrientationOfStairs_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hector_stair_detection_msgs::BorderAndOrientationOfStairs_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hector_stair_detection_msgs::BorderAndOrientationOfStairs_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hector_stair_detection_msgs::BorderAndOrientationOfStairs_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hector_stair_detection_msgs::BorderAndOrientationOfStairs_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hector_stair_detection_msgs::BorderAndOrientationOfStairs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ac1ed20e751bb1d26c4c9d9002347184";
  }

  static const char* value(const ::hector_stair_detection_msgs::BorderAndOrientationOfStairs_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xac1ed20e751bb1d2ULL;
  static const uint64_t static_value2 = 0x6c4c9d9002347184ULL;
};

template<class ContainerAllocator>
struct DataType< ::hector_stair_detection_msgs::BorderAndOrientationOfStairs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hector_stair_detection_msgs/BorderAndOrientationOfStairs";
  }

  static const char* value(const ::hector_stair_detection_msgs::BorderAndOrientationOfStairs_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hector_stair_detection_msgs::BorderAndOrientationOfStairs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# hector_stair_detection_msgs\n\
# This message contains, <visualization_msgs::MarkerArray> representing the border of the staris, and <geometry_msgs::PoseStamped> representing the orientation of the stairs corrosponign to the border\n\
\n\
#Header information\n\
std_msgs/Header header\n\
#border per staris\n\
visualization_msgs/MarkerArray border_of_stairs\n\
#orientation per staris\n\
geometry_msgs/PoseStamped orientation_of_stairs\n\
#number of points on line; more points <=> larger stairs <=> higher accurancy\n\
int32 number_of_points\n\
#direction of staris (vector)\n\
float32 directionX\n\
float32 directionY\n\
float32 directionZ\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: visualization_msgs/MarkerArray\n\
Marker[] markers\n\
\n\
================================================================================\n\
MSG: visualization_msgs/Marker\n\
# See http://www.ros.org/wiki/rviz/DisplayTypes/Marker and http://www.ros.org/wiki/rviz/Tutorials/Markers%3A%20Basic%20Shapes for more information on using this message with rviz\n\
\n\
uint8 ARROW=0\n\
uint8 CUBE=1\n\
uint8 SPHERE=2\n\
uint8 CYLINDER=3\n\
uint8 LINE_STRIP=4\n\
uint8 LINE_LIST=5\n\
uint8 CUBE_LIST=6\n\
uint8 SPHERE_LIST=7\n\
uint8 POINTS=8\n\
uint8 TEXT_VIEW_FACING=9\n\
uint8 MESH_RESOURCE=10\n\
uint8 TRIANGLE_LIST=11\n\
\n\
uint8 ADD=0\n\
uint8 MODIFY=0\n\
uint8 DELETE=2\n\
#uint8 DELETEALL=3 # TODO: enable for ROS-J, disabled for now but functionality is still there. Allows one to clear all markers in plugin\n\
\n\
Header header                        # header for time/frame information\n\
string ns                            # Namespace to place this object in... used in conjunction with id to create a unique name for the object\n\
int32 id 		                         # object ID useful in conjunction with the namespace for manipulating and deleting the object later\n\
int32 type 		                       # Type of object\n\
int32 action 	                       # 0 add/modify an object, 1 (deprecated), 2 deletes an object, 3 deletes all objects\n\
geometry_msgs/Pose pose                 # Pose of the object\n\
geometry_msgs/Vector3 scale             # Scale of the object 1,1,1 means default (usually 1 meter square)\n\
std_msgs/ColorRGBA color             # Color [0.0-1.0]\n\
duration lifetime                    # How long the object should last before being automatically deleted.  0 means forever\n\
bool frame_locked                    # If this marker should be frame-locked, i.e. retransformed into its frame every timestep\n\
\n\
#Only used if the type specified has some use for them (eg. POINTS, LINE_STRIP, ...)\n\
geometry_msgs/Point[] points\n\
#Only used if the type specified has some use for them (eg. POINTS, LINE_STRIP, ...)\n\
#number of colors must either be 0 or equal to the number of points\n\
#NOTE: alpha is not yet used\n\
std_msgs/ColorRGBA[] colors\n\
\n\
# NOTE: only used for text markers\n\
string text\n\
\n\
# NOTE: only used for MESH_RESOURCE markers\n\
string mesh_resource\n\
bool mesh_use_embedded_materials\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
================================================================================\n\
MSG: std_msgs/ColorRGBA\n\
float32 r\n\
float32 g\n\
float32 b\n\
float32 a\n\
\n\
================================================================================\n\
MSG: geometry_msgs/PoseStamped\n\
# A Pose with reference coordinate frame and timestamp\n\
Header header\n\
Pose pose\n\
";
  }

  static const char* value(const ::hector_stair_detection_msgs::BorderAndOrientationOfStairs_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hector_stair_detection_msgs::BorderAndOrientationOfStairs_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.border_of_stairs);
      stream.next(m.orientation_of_stairs);
      stream.next(m.number_of_points);
      stream.next(m.directionX);
      stream.next(m.directionY);
      stream.next(m.directionZ);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct BorderAndOrientationOfStairs_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hector_stair_detection_msgs::BorderAndOrientationOfStairs_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hector_stair_detection_msgs::BorderAndOrientationOfStairs_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "border_of_stairs: ";
    s << std::endl;
    Printer< ::visualization_msgs::MarkerArray_<ContainerAllocator> >::stream(s, indent + "  ", v.border_of_stairs);
    s << indent << "orientation_of_stairs: ";
    s << std::endl;
    Printer< ::geometry_msgs::PoseStamped_<ContainerAllocator> >::stream(s, indent + "  ", v.orientation_of_stairs);
    s << indent << "number_of_points: ";
    Printer<int32_t>::stream(s, indent + "  ", v.number_of_points);
    s << indent << "directionX: ";
    Printer<float>::stream(s, indent + "  ", v.directionX);
    s << indent << "directionY: ";
    Printer<float>::stream(s, indent + "  ", v.directionY);
    s << indent << "directionZ: ";
    Printer<float>::stream(s, indent + "  ", v.directionZ);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HECTOR_STAIR_DETECTION_MSGS_MESSAGE_BORDERANDORIENTATIONOFSTAIRS_H
